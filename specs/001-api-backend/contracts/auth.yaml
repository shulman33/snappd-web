openapi: 3.1.0
info:
  title: snappd Authentication API
  version: 1.0.0
  description: User authentication, profile management, and account operations

servers:
  - url: https://snappd.app/api
    description: Production
  - url: http://localhost:3000/api
    description: Local development

tags:
  - name: Authentication
    description: User signup, login, and session management
  - name: Profile
    description: User profile operations
  - name: Account
    description: Account management and GDPR compliance

paths:
  /auth/signup:
    post:
      summary: Create new user account
      description: Register a new user with email/password or OAuth provider. Creates profile record and Stripe customer.
      operationId: signup
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: SecurePass123!
                full_name:
                  type: string
                  maxLength: 255
                  example: John Doe
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  session:
                    $ref: '#/components/schemas/Session'
        '400':
          description: Invalid input (email format, password too weak)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/me:
    get:
      summary: Get current user profile
      description: Retrieve authenticated user's profile including plan and usage stats
      operationId: getProfile
      tags: [Profile]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      summary: Update user profile
      description: Update user's profile information (name, settings)
      operationId: updateProfile
      tags: [Profile]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                  maxLength: 255
                  example: Jane Doe
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/delete:
    post:
      summary: Delete user account
      description: Permanently delete user account, all screenshots, and metadata (GDPR compliance)
      operationId: deleteAccount
      tags: [Account]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [confirm]
              properties:
                confirm:
                  type: boolean
                  description: Must be true to confirm deletion
                  example: true
      responses:
        '200':
          description: Account deletion initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account deletion in progress. All data will be removed within 30 days.
        '400':
          description: Invalid input (confirm not true)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        email:
          type: string
          format: email
          example: user@example.com

    Session:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refresh_token:
          type: string
          description: JWT refresh token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expires_in:
          type: integer
          description: Token expiration in seconds
          example: 3600

    Profile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        email:
          type: string
          format: email
          example: user@example.com
        full_name:
          type: string
          nullable: true
          example: John Doe
        plan:
          type: string
          enum: [free, pro, team]
          example: free
        created_at:
          type: string
          format: date-time
          example: '2025-10-17T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-10-17T12:00:00Z'

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: Invalid email format
        code:
          type: string
          description: Error code for client handling
          example: INVALID_INPUT

